#BlueJ class context
comment0.params=
comment0.target=Board()
comment1.params=name
comment1.target=void\ setName(java.lang.String)
comment10.params=colour\ turn\ diceValues
comment10.target=void\ takeTurn(Colour,\ TurnInterface,\ java.util.List)
comment10.text=\ Update\ the\ Board\ state\ by\ making\ the\ all\ of\ the\ moves\ in\ the\ given\ turn\ in\ order,\ including\ any\ knocking\ off,\ based\ on\ the\ given\ diceValues.\r\n\ @param\ colour\ the\ colour\ to\ move\r\n\ @param\ turn\ the\ turn\ to\ take\r\n\ @param\ diceValues\ the\ values\ of\ the\ dice\ available\ in\ no\ particular\ order.\ There\ will\ be\ repeated\ values\ in\ the\ list\ if\ a\ double\ is\ thrown\r\n@throws\ IllegalTurnException\ if\ and\ only\ if\ the\ turns\ in\ the\ move\ are\ not\ legal\ for\ the\ diceValues\ give.\ Each\ of\ the\ moves\ has\ to\ be\ legal,\ and\ the\ diceValues\ in\ the\ moves\ of\ the\ turn\ must\ match\ the\ diceValues\ parameter.\ The\ number\ of\ moves\ in\ the\ turn\ must\ be\ no\ less\ than\ the\ maximum\ possible\ number\ of\ legal\ moves\:\ all\ available\ dice\ must\ be\ used.\ If\ IllegalTurnException\ is\ thrown\ then\ the\ board\ state\ remains\ unchanged.\ *
comment11.params=colour
comment11.target=boolean\ isWinner(Colour)
comment11.text=\ @param\ colour\ the\ colour\ to\ check\r\n@return\ true\ if\ and\ only\ if\ the\ given\ colour\ has\ won\ *
comment12.params=
comment12.target=Colour\ winner()
comment12.text=@return\ the\ colour\ of\ the\ winner\ if\ there\ is\ one,\ otherwise\ null\ *
comment13.params=
comment13.target=boolean\ isValid()
comment13.text=@return\ true\ if\ and\ only\ if\ the\ Board\ is\ in\ a\ valid\ state\ (do\ not\ need\ to\ check\ whether\ or\ not\ it\ could\ be\ reached\ by\ a\ valid\ sequence\ of\ moves)\ *
comment14.params=colour\ diceValues
comment14.target=java.util.Set\ possibleMoves(Colour,\ java.util.List)
comment14.text=\ @param\ colour\ the\ colour\ to\ move\ next\r\n\ \ @param\ diceValues\ the\ dice\ values\ available\ to\ use\r\n@return\ a\ list\ of\ moves\ that\ the\ given\ colour\ can\ make\ from\ the\ current\ board\ state\ with\ (any\ one\ of)\ the\ given\ diceValues\ *
comment15.params=
comment15.target=BoardInterface\ clone()
comment15.text=@return\ a\ copy\ of\ the\ board\ that\ can\ be\ passed\ to\ players\ to\ work\ with\ *
comment16.params=
comment16.target=java.lang.String\ toString()
comment16.text=Overrides\ toString()\ from\ Object\ with\ a\ suitable\ String\ representation\ of\ the\ board\ state\ for\ displaying\ via\ the\ console\ to\ a\ human\ *
comment2.params=
comment2.target=java.util.List\ getLocations()
comment3.params=loc
comment3.target=void\ setLocations(java.util.List)
comment4.params=
comment4.target=LocationInterface\ getStartLocation()
comment4.text=@return\ the\ Location\ off\ the\ board\ where\ all\ pieces\ start\ the\ game.\ This\ will\ be\ a\ mixed\ location.\ *
comment5.params=
comment5.target=LocationInterface\ getEndLocation()
comment5.text=@return\ the\ Location\ off\ the\ board\ where\ pieces\ get\ to\ when\ they\ have\ gone\ all\ the\ way\ round\ the\ board.\ This\ will\ be\ a\ mixed\ location.\ *
comment6.params=
comment6.target=LocationInterface\ getKnockedLocation()
comment6.text=@return\ the\ Location\ where\ pieces\ go\ to\ when\ they\ are\ knocked\ off\ the\ board\ by\ an\ opposing\ piece.\ This\ will\ be\ a\ mixed\ location.\ *
comment7.params=locationNumber
comment7.target=LocationInterface\ getBoardLocation(int)
comment7.text=\ @return\ the\ Location\ corresponding\ to\ a\ numbered\ position\ on\ the\ board.\ This\ will\ not\ be\ a\ mixed\ location\r\n\ @param\ locationNumber\ the\ number\ of\ the\ location\ going\ from\ 1-24\r\n@throws\ NoSuchLocationException\ when\ position\ is\ not\ in\ the\ range\ 1-24\ *
comment8.params=colour\ move
comment8.target=boolean\ canMakeMove(Colour,\ MoveInterface)
comment8.text=\ @param\ colour\ the\ colour\ to\ move\r\n\ @param\ move\ the\ move\ to\ make\r\n@return\ true\ if\ and\ only\ if,\ from\ the\ current\ board\ state\ it\ would\ be\ legal\ for\ the\ given\ colour\ to\ make\ the\ given\ move.\ *
comment9.params=colour\ move
comment9.target=void\ makeMove(Colour,\ MoveInterface)
comment9.text=\ Update\ the\ Board\ state\ by\ making\ the\ given\ move\ for\ the\ given\ colour,\ including\ any\ knocking\ off.\r\n\ @param\ colour\ the\ colour\ to\ move\r\n\ @param\ move\ the\ move\ to\ make\r\n@throws\ IllegalMoveException\ if\ and\ only\ if\ the\ move\ is\ not\ legal.\ *
numComments=17
