#BlueJ class context
comment0.params=
comment0.target=Game()
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\ Also\ requires\ a\ main\ method\ which\ allows\ the\ user\ to\ choose\ the\ player\ types\ and\ start\ the\ game.\ The\ main\ method\ menu\ should\ allow\ users\ to\:\ set\ the\ players\ (human\ or\ computer);\ load\ a\ game;\ continue\ a\ game;\ save\ the\ game;\ start\ a\ new\ game;\ exit\ the\ program.\ \r\nIf\ providing\ a\ GUI\ then\ the\ same\ options\ need\ to\ be\ available\ through\ the\ GUI.\ *
comment2.params=colour\ player
comment2.target=void\ setPlayer(Colour,\ PlayerInterface)
comment2.text=\ @param\ colour\ of\ the\ player\ to\ set\r\n@param\ player\ the\ player\ to\ use\ *
comment3.params=
comment3.target=Colour\ getCurrentPlayer()
comment3.text=@return\ the\ player\ who\ has\ the\ next\ turn.\ Green\ goes\ first.\ *
comment4.params=
comment4.target=Colour\ play()
comment4.text=\ Play\ the\ game\ until\ completion\ or\ pause.\ Should\ work\ either\ for\ a\ new\ game\ or\ the\ continuation\ of\ a\ paused\ game.\ This\ method\ should\ roll\ the\ dice\ and\ pass\ the\ dice\ values\ to\ the\ players.\ The\ players\ should\ be\ asked\ one\ after\ another\ for\ their\ choice\ of\ turn\ via\ their\ getTurn\ method.\ The\ board\ that\ is\ passed\ to\ the\ players\ should\ be\ a\ clone\ of\ the\ game\ board\ so\ that\ they\ can\ try\ out\ moves\ without\ affecting\ the\ state\ of\ the\ game.\r\n\ \ @return\ the\ colour\ of\ the\ winner\ if\ there\ is\ one,\ or\ null\ if\ not\ (the\ game\ has\ been\ paused\ by\ a\ player).\ If\ a\ player\ tries\ to\ take\ an\ illegal\ turn\ then\ they\ forfeit\ the\ game\ and\ the\ other\ player\ immediately\ wins.\r\n@throws\ PlayerNotDefinedException\ if\ one\ or\ both\ of\ the\ players\ is\ undefined\ *
comment5.params=filename
comment5.target=void\ saveGame(java.lang.String)
comment5.text=\ Save\ the\ current\ state\ of\ the\ game\ (including\ the\ board,\ dice\ and\ player\ types)\ into\ a\ file\ so\ it\ can\ be\ re-loaded\ and\ game\ play\ continued.\ You\ choose\ what\ the\ format\ of\ the\ file\ is.\r\n\ \ @param\ filename\ the\ name\ of\ the\ file\ in\ which\ to\ save\ the\ game\ state\r\n@throws\ IOException\ when\ an\ I/O\ problem\ occurs\ while\ saving\ *
comment6.params=filename
comment6.target=void\ loadGame(java.lang.String)
comment6.text=\ Load\ the\ game\ state\ from\ the\ given\ file\r\n\ \ @param\ filename\ \ the\ name\ of\ the\ file\ from\ which\ to\ load\ the\ game\ state\r\n@throws\ IOException\ when\ an\ I/O\ problem\ occurs\ or\ the\ file\ is\ not\ in\ the\ correct\ format\ (as\ used\ by\ saveGame())\ *
numComments=7
